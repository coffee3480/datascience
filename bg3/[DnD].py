'''
AdB - означает, что бросается А кубиков с количеством граней B.
1d20 - один двадцатигранный кубик
1d8 - один восьмигранный кубик
1d4 - один четырехгранный кубик
2d6 - два шестигранных кубика

Чтобы атаковать другого персонажа игрок сначала выполняет бросок атаки 1d20,
чтобы определить попал он или промахнулся. Если выпавшее значение после учета
бонусов и штрафов к броску >= классу брони цели, то игрок попадает, иначе -
промахивается. Пример: класс брони цели = 10. На игрока действует бонус к
броскам атаки +3. Игрок бросает 1d20 и ему выпадает 8. 8+3=11. 11>10 =>
игрок попал. Если игрок успешно выполнил бросок атаки и попал по противнику, то
дальше он выполняет бросок урона, который определит количество урона, которое
он нанесёт. На бросок атаки может действовать помеха или преимущество. При атаке
с преимуществом игрок бросает кубик дважды и берёт лучший из результатов. При
выполнении броска атаки с помехой он также бросает 1d20 дважды, но берёт
худший из результатов.

Игрок атакует вражеского персонажа с классом брони 24. На игрока действуют
следующие бонусы:

+3 к броскам атаки от показателя силы
+1d8 к броскам атаки от вдохновения
+1d4 к броскам атаки от зачарованного меча

Какова вероятность, что игрок попадёт по противнику?
Какова вероятность, что игрок попадёт по противнику, атакуя с помехой?
Какова вероятность, что игрок убьёт вражеского персонажа за 2 удара, атакуя с
преимуществом, если его огненный меч наносит 1d8 режущего урона и 1d4 урона
огнём, а у противника 16 очков здоровья?

'''


import itertools

r1d20=(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
r1d8=(1,2,3,4,5,6,7,8)
r1d4=(1,2,3,4)

r1d8_1=(1,2,3,4,5,6,7,8)
r1d4_1=(1,2,3,4)
r1d8_2=(1,2,3,4,5,6,7,8)
r1d4_2=(1,2,3,4)

armorclass=24

def printArray(a):
    for i in a:
        print(i,'\n')

attackRolls=list(itertools.product(r1d20,r1d8,r1d4))
printArray(attackRolls)

count=0
for i in attackRolls:
    if((sum(i)+3)>= armorclass):
        count+=1

hitProbability=count/len(attackRolls)

print('Шанс попасть = ', count, ' / ', len(attackRolls), ' = ', hitProbability)

print('Шанс попасть с преимуществом = ', 1-(1-hitProbability)**2)

print('Шанс попасть с помехой = ', hitProbability**2)

print('Шанс попасть с преимуществом 2 раза подряд = ', (1-(1-hitProbability)**2)**2)

damageRolls=list(itertools.product(r1d8_1, r1d4_1, r1d8_2, r1d4_2))
printArray(damageRolls)

count=0
for i in damageRolls:
    if(sum(i)>=16):
        count+=1
dmgProbability=count/len(damageRolls)

print('Шанс нанести урон >= 16 = ', count, ' / ', len(damageRolls),' = ', dmgProbability)

print('Шанс совместных событий: игрок попал с преимуществом 2 раза подряд и нанёс достаточное количество урона = ', (1-(1-hitProbability)**2)**2, ' * ', dmgProbability, ' = ', ((1-(1-hitProbability)**2)**2)*dmgProbability)

answer = round(((1-(1-hitProbability)**2)**2)*dmgProbability*100, 2)
print('Ответ: ', answer, '%')


